#include<iostream>
#include<graphics.h>

using namespace std;

const int x_min = 100, y_min = 100, x_max = 400, y_max = 400;

#define INSIDE 0
#define LEFT 1
#define RIGHT 2
#define BELOW 4
#define ABOVE 8

// Function to compute the outcode for a given point
int computeOutCode(int x, int y) {
    int code = INSIDE;
    
    if (x < x_min) {       // to the left of the clip window
        code |= LEFT;
    } else if (x > x_max) { // to the right of the clip window
        code |= RIGHT;
    }
    
    if (y < y_min) {       // below the clip window
        code |= BELOW;
    } else if (y > y_max) { // above the clip window
        code |= ABOVE;
    }
    
    return code;
}

// Cohen-Sutherland Line Clipping Algorithm
void cohenSutherland(int &x1, int &y1, int &x2, int &y2) {
    int outCode1 = computeOutCode(x1, y1); // compute outcode for first point
    int outCode2 = computeOutCode(x2, y2); // compute outcode for second point
    bool accept = false;
    
    while (true) {
        if (outCode1 == 0 && outCode2 == 0) {  // both points inside
            accept = true;
            break;
        } else if (outCode1 & outCode2) {      // both points outside (in the same region)
            break;
        } else {
            int outCodeOut;
            int x, y;

            if (outCode1 != 0) {     // point 1 is outside
                outCodeOut = outCode1;
            } else {                  // point 2 is outside
                outCodeOut = outCode2;
            }

            // Find the intersection point
            if (outCodeOut & ABOVE) {
                x = x1 + (x2 - x1) * (y_max - y1) / (y2 - y1);
                y = y_max;
            } else if (outCodeOut & BELOW) {
                x = x1 + (x2 - x1) * (y_min - y1) / (y2 - y1);
                y = y_min;
            } else if (outCodeOut & LEFT) {
                y = y1 + (y2 - y1) * (x_min - x1) / (x2 - x1);
                x = x_min;
            } else if (outCodeOut & RIGHT) {
                y = y1 + (y2 - y1) * (x_max - x1) / (x2 - x1);
                x = x_max;
            }

            // Update the point
            if (outCodeOut == outCode1) {
                x1 = x;
                y1 = y;
                outCode1 = computeOutCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                outCode2 = computeOutCode(x2, y2);
            }
        }
    }

    // If accepted, draw the line
    if (accept) {
        setcolor(RED);
        line(x1, y1, x2, y2);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);
    
    // Draw the clipping rectangle
    rectangle(x_min, y_min, x_max, y_max);
    
    // Define a line to clip
    int x1 = 50, y1 = 50, x2 = 350, y2 = 350;
    
    // Set color and draw the line before clipping
    setcolor(GREEN);
    line(x1, y1, x2, y2);
    
    // Apply the Cohen-Sutherland clipping algorithm
    cohenSutherland(x1, y1, x2, y2);
    
    // Wait for the user to press a key before closing
    getch();
    closegraph();
    
    return 0;
}

